import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()

        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"

        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'
    apply plugin: "kotlin-jpa"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://software.r3.com/artifactory/corda-lib' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"
}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
        cordapp("$confidential_id_release_group:ci-workflows:$confidential_id_release_version")
        cordapp("$accounts_release_group:accounts-contracts:$accounts_release_version")
        cordapp("$accounts_release_group:accounts-workflows:$accounts_release_version")
        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=BoardLendNotary,L=Bangkok,C=TH"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
        extraConfig = [
                'dataSourceProperties.dataSourceClassName': 'org.postgresql.ds.PGSimpleDataSource',
                'dataSourceProperties.dataSource.url'     : 'jdbc:postgresql://n8ify.com:5400/boardlend_notary_cordapp',
                'dataSourceProperties.dataSource.password': System.getenv("DATASOURCE_PASSWORD"),
                'dataSourceProperties.dataSource.user'    : System.getenv("DATASOURCE_USERNAME")
        ]
        drivers = ['libs/postgresql-42.3.1.jar']
    }
    node {
        name "O=Borrower,L=Nakorn Pathom,C=TH"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": [
                "InvokeRpc.nodeInfo",
                "InvokeRpc.registeredFlows",
                "InvokeRpc.partiesFromName",
                "InvokeRpc.wellKnownPartyFromX500Name",
                "InvokeRpc.startFlow",
                "InvokeRpc.startTrackedFlowDynamic",
                "StartFlow.com.template.flows.borrower.CreateBorrowerAccountFlow",
                "StartFlow.com.template.flows.borrower.UpdateBorrowerAccountFlow",
                "StartFlow.com.template.flows.borrower.GetBorrowerPaginatedFlow",
                "StartFlow.com.template.flows.borrower.BorrowBoardGameFlow",
                "StartFlow.com.template.flows.borrower.ReturnBoardGameFlow",
                "StartFlow.com.template.flows.borrower.GetBoardGameFlow"]]]
        extraConfig = [
                'dataSourceProperties.dataSourceClassName': 'org.postgresql.ds.PGSimpleDataSource',
                'dataSourceProperties.dataSource.url'     : 'jdbc:postgresql://n8ify.com:5400/boardlend_borrower_cordapp',
                'dataSourceProperties.dataSource.password': System.getenv("DATASOURCE_PASSWORD"),
                'dataSourceProperties.dataSource.user'    : System.getenv("DATASOURCE_USERNAME")
        ]
        drivers = ['libs/postgresql-42.3.1.jar']
    }
    node {
        name "O=Lender,L=Bangkok,C=TH"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        rpcUsers = [[ user: "user1", "password": "test", "permissions": [
                "InvokeRpc.nodeInfo",
                "InvokeRpc.registeredFlows",
                "InvokeRpc.partiesFromName",
                "InvokeRpc.wellKnownPartyFromX500Name",
                "InvokeRpc.startFlow",
                "InvokeRpc.startTrackedFlowDynamic",
                "StartFlow.com.template.flows.GetStateStatusFlow",
                "StartFlow.com.template.flows.lender.CreateBoardGameFlow",
                "StartFlow.com.template.flows.borrower.GetBoardGameFlow",
                "StartFlow.com.template.flows.borrower.GetBorrowerPaginatedFlow",
                "StartFlow.com.template.flows.lender.CreateLenderAccountFlow",
                "StartFlow.com.template.flows.lender.UpdateLenderAccountFlow"]]]
        extraConfig = [
                'dataSourceProperties.dataSourceClassName': 'org.postgresql.ds.PGSimpleDataSource',
                'dataSourceProperties.dataSource.url'     : 'jdbc:postgresql://n8ify.com:5400/boardlend_lender_cordapp',
                'dataSourceProperties.dataSource.password': System.getenv("DATASOURCE_PASSWORD"),
                'dataSourceProperties.dataSource.user'    : System.getenv("DATASOURCE_USERNAME")
        ]
        drivers = ['libs/postgresql-42.3.1.jar']
    }

}


task runLocalNode() {
    doFirst {
        exec {
            workingDir(rootDir)
            executable ((DefaultNativePlatform.currentOperatingSystem.isWindows()) ? 'gradlew.bat' : 'gradlew')
            args('clean', 'build', '-x', 'test')
        }
    }
    doLast {

        def rootCordappDeployDir = "localNode/nodes/"
        def jarsAndPath = [
                ["contracts-0.1.jar", (rootDir.toString() + "/contracts/build/libs/")],
                ["workflows-0.1.jar", (rootDir.toString() + "/workflows/build/libs/")]
        ]
        List<String> deployCordappDirs =  [
                rootCordappDeployDir + "BoardLendNotary/cordapps/", rootCordappDeployDir + "Borrower/cordapps/", rootCordappDeployDir + "Lender/cordapps/"
        ]
        jarsAndPath.forEach { val ->
            deployCordappDirs.forEach { deployCordappDir ->
                delete("$deployCordappDir/${val[0]}")
                copy {
                    from val[1]
                    into deployCordappDir
                    println "Copy to $path/${val[0]} done!"
                }
            }
        }
    }
}